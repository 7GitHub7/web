"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1203],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),l=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),y=l(a),d=r,m=y["".concat(u,".").concat(d)]||y[d]||p[d]||o;return a?n.createElement(m,i(i({ref:t},c),{},{components:a})):n.createElement(m,i({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=y;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},1901:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),i=["components"],s={sidebar_position:1},u="Equals and HashCode",l={unversionedId:"Java/concepts/Equals i hashCode",id:"Java/concepts/Equals i hashCode",title:"Equals and HashCode",description:"Przyk\u0142ad funckji equals:",source:"@site/docs/Java/concepts/Equals i hashCode.md",sourceDirName:"Java/concepts",slug:"/Java/concepts/Equals i hashCode",permalink:"/docs/Java/concepts/Equals i hashCode",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Java/concepts/Equals i hashCode.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Comparable vs. Comparator",permalink:"/docs/Java/concepts/Comparable vs. Comparator"},next:{title:"Process Manager",permalink:"/docs/Java/patterns/Process Manager"}},c={},p=[],y={toc:p};function d(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},y,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"equals-and-hashcode"},"Equals and HashCode"),(0,o.kt)("p",null,"Przyk\u0142ad funckji equals:"),(0,o.kt)("p",null,"@Override\npublic boolean equals(Object o) {\nif (o == this)\nreturn true;\nif (!(o instanceof Voucher))\nreturn false;\nVoucher other = (Voucher) o;\nboolean valueEquals = (this.value == null && other.value == null)\n|| (this.value != null && this.value.equals(other.value));\nboolean storeEquals = (this.store == null && other.store == null)\n|| (this.store != null && this.store.equals(other.store));\nreturn valueEquals && storeEquals;\n}"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Sprawdzamy czy wska\u017aniki wskazuj\u0105 na ten sam obiekt - je\u015bli tak zwracamy true"),(0,o.kt)("li",{parentName:"ol"},"Sprawdzamy czy obiekt jest w\u0142a\u015bciewgo typu - je\u015bli nie to zwracamy false"),(0,o.kt)("li",{parentName:"ol"},"sprawdzamy czy warto\u015bci s\u0105 r\xf3wne i zwracamy true/false")),(0,o.kt)("p",null,"Object identity okre\u015bla, czy zmienne wskazuj\u0105 na ten sam obiekt.  "),(0,o.kt)("p",null,"HashCode przechowuje obliczon\u0105 warto\u015b\u0107 hasha dla obiektu. Hash jest to wyniku pewego algorytmy wykonanego na wybranych polach klasy np: mamy klas\u0119 pies, a w niej atrybuty takie jak imie oraz wiek. Ustalamy, \u017ce b\u0119dziemy mno\u017cy\u0107 wiek oraz imi\u0119 przez 31 i na ko\u0144cu zsumujemy te wyniki. Tak powsta\u0142a liczba mo\u017ce by\u0107 u\u017cyta jako unikalny identyfikator obiektu policzony na wielu polach jednej klasy. U\u017cywany jest w przypadku kiedy dodajemy obiekty do hashMapy w kt\xf3rej obiekty s\u0105 grupowane po hashCode. Niepoprawna implementacja hashCode dla funckji mo\u017ce znacz\u0105c\u0105 spowolni\u0107 wyszukiwanie w strukturze.\nWed\u0142ug bada\u0144 nad wydajno\u015bci\u0105, najoptymalniejsz\u0105 metod\u0105 obliczania hasha jest mno\u017cenie wyniku przez liczby pierwsze. 31 jest liczb\u0105 pierwsz\u0105 co powoduj\u0105 mniejsz\u0105 liczb\u0119 kolizji."))}d.isMDXComponent=!0}}]);